[
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "Citation\nTo cite package ‘lockbox’ in publications use:\n\n  Arel-Bundock V (2025). _lockbox: Modern Encryption for R Using 'age'\n  and 'SOPS'_. R package version 0.0.1,\n  &lt;https://github.com/vincentarelbundock/lockbox/issues&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {lockbox: Modern Encryption for R Using 'age' and 'SOPS'},\n    author = {Vincent Arel-Bundock},\n    year = {2025},\n    note = {R package version 0.0.1},\n    url = {https://github.com/vincentarelbundock/lockbox/issues},\n  }",
    "crumbs": [
      "Citation"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "MIT License\nCopyright (c) 2025 lockbox authors\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "crumbs": [
      "License"
    ]
  },
  {
    "objectID": "man/print.lockbox_key.html",
    "href": "man/print.lockbox_key.html",
    "title": "lockbox",
    "section": "",
    "text": "Print method for lockbox_key objects\n\n\n\n## S3 method for class 'lockbox_key'\nprint(x, ...)\n\n\n\n\n\n\n\nx\n\n\nA lockbox_key object.",
    "crumbs": [
      "Reference",
      "print.lockbox_key"
    ]
  },
  {
    "objectID": "man/print.lockbox_key.html#print-method-for-lockbox_key-objects",
    "href": "man/print.lockbox_key.html#print-method-for-lockbox_key-objects",
    "title": "lockbox",
    "section": "",
    "text": "Print method for lockbox_key objects\n\n\n\n## S3 method for class 'lockbox_key'\nprint(x, ...)\n\n\n\n\n\n\n\nx\n\n\nA lockbox_key object.",
    "crumbs": [
      "Reference",
      "print.lockbox_key"
    ]
  },
  {
    "objectID": "man/lockbox_decrypt.html",
    "href": "man/lockbox_decrypt.html",
    "title": "lockbox",
    "section": "",
    "text": "Retrieve and decrypt secrets from an encrypted YAML lockbox file. Can return all secrets or filter to specific secret names.\n\n\n\nlockbox_decrypt(lockbox, secrets = NULL, private = NULL)\n\n\n\n\n\n\n\nlockbox\n\n\nCharacter string. Path to the lockbox YAML file to decrypt.\n\n\n\n\nsecrets\n\n\nCharacter vector or NULL. Specific secret names to retrieve. If NULL, returns all secrets.\n\n\n\n\nprivate\n\n\nCharacter string or NULL. Private key for decryption. Can be a private key string starting with \"AGE-SECRET-KEY-1\" or path to a key file. If NULL, uses default SOPS key resolution.\n\n\n\n\n\n\nNamed list of decrypted secrets.\n\n\n\n\nlibrary(lockbox)\n\n# Decrypt all secrets\nall_secrets &lt;- lockbox_decrypt(\"secrets.yaml\", private = key$private)\n\n# Decrypt specific secrets\napi_key &lt;- lockbox_decrypt(\"secrets.yaml\", secrets = \"API_KEY\", private = key$private)\n\n# Decrypt multiple specific secrets\ncreds &lt;- lockbox_decrypt(\"secrets.yaml\", secrets = c(\"API_KEY\", \"PASSWORD\"), private = key$private)\n\n# Decrypt using key file\nall_secrets &lt;- lockbox_decrypt(\"secrets.yaml\", private = \"identity.key\")",
    "crumbs": [
      "Reference",
      "lockbox_decrypt"
    ]
  },
  {
    "objectID": "man/lockbox_decrypt.html#decrypt-secrets-from-a-sops-lockbox",
    "href": "man/lockbox_decrypt.html#decrypt-secrets-from-a-sops-lockbox",
    "title": "lockbox",
    "section": "",
    "text": "Retrieve and decrypt secrets from an encrypted YAML lockbox file. Can return all secrets or filter to specific secret names.\n\n\n\nlockbox_decrypt(lockbox, secrets = NULL, private = NULL)\n\n\n\n\n\n\n\nlockbox\n\n\nCharacter string. Path to the lockbox YAML file to decrypt.\n\n\n\n\nsecrets\n\n\nCharacter vector or NULL. Specific secret names to retrieve. If NULL, returns all secrets.\n\n\n\n\nprivate\n\n\nCharacter string or NULL. Private key for decryption. Can be a private key string starting with \"AGE-SECRET-KEY-1\" or path to a key file. If NULL, uses default SOPS key resolution.\n\n\n\n\n\n\nNamed list of decrypted secrets.\n\n\n\n\nlibrary(lockbox)\n\n# Decrypt all secrets\nall_secrets &lt;- lockbox_decrypt(\"secrets.yaml\", private = key$private)\n\n# Decrypt specific secrets\napi_key &lt;- lockbox_decrypt(\"secrets.yaml\", secrets = \"API_KEY\", private = key$private)\n\n# Decrypt multiple specific secrets\ncreds &lt;- lockbox_decrypt(\"secrets.yaml\", secrets = c(\"API_KEY\", \"PASSWORD\"), private = key$private)\n\n# Decrypt using key file\nall_secrets &lt;- lockbox_decrypt(\"secrets.yaml\", private = \"identity.key\")",
    "crumbs": [
      "Reference",
      "lockbox_decrypt"
    ]
  },
  {
    "objectID": "man/key_private.html",
    "href": "man/key_private.html",
    "title": "lockbox",
    "section": "",
    "text": "Read an age identity file and extract the private key string. The private key is secret and used for decryption.\n\n\n\nkey_private(keyfile)\n\n\n\n\n\n\n\nkeyfile\n\n\nCharacter string. Path to the age identity file.\n\n\n\n\n\n\nCharacter string containing the private key (starts with \"AGE-SECRET-KEY-1\").\n\n\n\n\nlibrary(lockbox)\n\n# Extract private key from file\nprivate_key &lt;- key_private(\"my_identity.key\")\n# Use for decryption\nsecrets &lt;- lockbox_decrypt(\"secrets.yaml\", private = private_key)",
    "crumbs": [
      "Reference",
      "key_private"
    ]
  },
  {
    "objectID": "man/key_private.html#extract-private-key-from-an-age-identity-file",
    "href": "man/key_private.html#extract-private-key-from-an-age-identity-file",
    "title": "lockbox",
    "section": "",
    "text": "Read an age identity file and extract the private key string. The private key is secret and used for decryption.\n\n\n\nkey_private(keyfile)\n\n\n\n\n\n\n\nkeyfile\n\n\nCharacter string. Path to the age identity file.\n\n\n\n\n\n\nCharacter string containing the private key (starts with \"AGE-SECRET-KEY-1\").\n\n\n\n\nlibrary(lockbox)\n\n# Extract private key from file\nprivate_key &lt;- key_private(\"my_identity.key\")\n# Use for decryption\nsecrets &lt;- lockbox_decrypt(\"secrets.yaml\", private = private_key)",
    "crumbs": [
      "Reference",
      "key_private"
    ]
  },
  {
    "objectID": "man/file_decrypt.html",
    "href": "man/file_decrypt.html",
    "title": "lockbox",
    "section": "",
    "text": "Decrypt a file that was encrypted with age. Can use a private key, key file, or passphrase.\n\n\n\nfile_decrypt(input, output, private = NULL)\n\n\n\n\n\n\n\ninput\n\n\nCharacter string. Path to the encrypted .age file.\n\n\n\n\noutput\n\n\nCharacter string. Path for the decrypted output file. Defaults to removing .age extension.\n\n\n\n\nprivate\n\n\nCharacter string or NULL. Private key for decryption. Can be:\n\n\nA private key string starting with \"AGE-SECRET-KEY-1\"\n\n\nPath to an age identity file\n\n\nNULL to prompt for passphrase\n\n\n\n\n\n\n\n\nInvisibly returns the output file path.\n\n\n\n\nlibrary(lockbox)\n\n# Decrypt with private key string\nkey &lt;- key_generate()\nfile_decrypt(\"sensitive.csv.age\", private = key$private)\n\n# Decrypt with key file\nfile_decrypt(\"sensitive.csv.age\", private = \"identity.key\")\n\n# Decrypt with passphrase\nfile_decrypt(\"sensitive.csv.age\")\n\n# Custom output path\nfile_decrypt(\"data.txt.age\", \"recovered_data.txt\", key$private)",
    "crumbs": [
      "Reference",
      "file_decrypt"
    ]
  },
  {
    "objectID": "man/file_decrypt.html#decrypt-an-age-encrypted-file",
    "href": "man/file_decrypt.html#decrypt-an-age-encrypted-file",
    "title": "lockbox",
    "section": "",
    "text": "Decrypt a file that was encrypted with age. Can use a private key, key file, or passphrase.\n\n\n\nfile_decrypt(input, output, private = NULL)\n\n\n\n\n\n\n\ninput\n\n\nCharacter string. Path to the encrypted .age file.\n\n\n\n\noutput\n\n\nCharacter string. Path for the decrypted output file. Defaults to removing .age extension.\n\n\n\n\nprivate\n\n\nCharacter string or NULL. Private key for decryption. Can be:\n\n\nA private key string starting with \"AGE-SECRET-KEY-1\"\n\n\nPath to an age identity file\n\n\nNULL to prompt for passphrase\n\n\n\n\n\n\n\n\nInvisibly returns the output file path.\n\n\n\n\nlibrary(lockbox)\n\n# Decrypt with private key string\nkey &lt;- key_generate()\nfile_decrypt(\"sensitive.csv.age\", private = key$private)\n\n# Decrypt with key file\nfile_decrypt(\"sensitive.csv.age\", private = \"identity.key\")\n\n# Decrypt with passphrase\nfile_decrypt(\"sensitive.csv.age\")\n\n# Custom output path\nfile_decrypt(\"data.txt.age\", \"recovered_data.txt\", key$private)",
    "crumbs": [
      "Reference",
      "file_decrypt"
    ]
  },
  {
    "objectID": "man/file_encrypt.html",
    "href": "man/file_encrypt.html",
    "title": "lockbox",
    "section": "",
    "text": "Encrypt any file using age encryption with public key(s) or a passphrase. The encrypted file will have a .age extension by default.\n\n\n\nfile_encrypt(\n  input,\n  output = paste0(input, \".age\"),\n  public = NULL,\n  passphrase = FALSE,\n  armor = FALSE\n)\n\n\n\n\n\n\n\ninput\n\n\nCharacter string. Path to the file to encrypt.\n\n\n\n\noutput\n\n\nCharacter string. Path for the encrypted output file. Defaults to input.age.\n\n\n\n\npublic\n\n\nCharacter vector or NULL. Public key(s) for encryption (age recipient identifiers). Must be provided if passphrase = FALSE.\n\n\n\n\npassphrase\n\n\nLogical. If TRUE, prompts for a passphrase instead of using public keys.\n\n\n\n\narmor\n\n\nLogical. If TRUE, outputs ASCII-armored format instead of binary.\n\n\n\n\n\n\nInvisibly returns the output file path.\n\n\n\n\nlibrary(lockbox)\n\n# Encrypt with public key\nkey &lt;- key_generate()\nfile_encrypt(\"sensitive.csv\", public = key$public)\n\n# Encrypt with passphrase\nfile_encrypt(\"sensitive.csv\", passphrase = TRUE)\n\n# Custom output path and ASCII armor\nfile_encrypt(\"data.txt\", \"encrypted_data.age\", key$public, armor = TRUE)",
    "crumbs": [
      "Reference",
      "file_encrypt"
    ]
  },
  {
    "objectID": "man/file_encrypt.html#encrypt-a-file-using-age",
    "href": "man/file_encrypt.html#encrypt-a-file-using-age",
    "title": "lockbox",
    "section": "",
    "text": "Encrypt any file using age encryption with public key(s) or a passphrase. The encrypted file will have a .age extension by default.\n\n\n\nfile_encrypt(\n  input,\n  output = paste0(input, \".age\"),\n  public = NULL,\n  passphrase = FALSE,\n  armor = FALSE\n)\n\n\n\n\n\n\n\ninput\n\n\nCharacter string. Path to the file to encrypt.\n\n\n\n\noutput\n\n\nCharacter string. Path for the encrypted output file. Defaults to input.age.\n\n\n\n\npublic\n\n\nCharacter vector or NULL. Public key(s) for encryption (age recipient identifiers). Must be provided if passphrase = FALSE.\n\n\n\n\npassphrase\n\n\nLogical. If TRUE, prompts for a passphrase instead of using public keys.\n\n\n\n\narmor\n\n\nLogical. If TRUE, outputs ASCII-armored format instead of binary.\n\n\n\n\n\n\nInvisibly returns the output file path.\n\n\n\n\nlibrary(lockbox)\n\n# Encrypt with public key\nkey &lt;- key_generate()\nfile_encrypt(\"sensitive.csv\", public = key$public)\n\n# Encrypt with passphrase\nfile_encrypt(\"sensitive.csv\", passphrase = TRUE)\n\n# Custom output path and ASCII armor\nfile_encrypt(\"data.txt\", \"encrypted_data.age\", key$public, armor = TRUE)",
    "crumbs": [
      "Reference",
      "file_encrypt"
    ]
  },
  {
    "objectID": "man/lockbox_encrypt.html",
    "href": "man/lockbox_encrypt.html",
    "title": "lockbox",
    "section": "",
    "text": "Store secrets in an encrypted YAML file using SOPS and age encryption. If the lockbox file already exists, secrets will be merged with existing ones.\n\n\n\nlockbox_encrypt(lockbox, secrets, public, private = NULL)\n\n\n\n\n\n\n\nlockbox\n\n\nCharacter string. Path to the lockbox YAML file to create or update.\n\n\n\n\nsecrets\n\n\nNamed list. Secrets to encrypt, where names are variable names and values are the secret values.\n\n\n\n\npublic\n\n\nCharacter vector. One or more public keys for encryption (age recipient identifiers).\n\n\n\n\nprivate\n\n\nCharacter string or NULL. Private key required if lockbox already exists (for decryption and merging). Can be a private key string starting with \"AGE-SECRET-KEY-1\" or path to a key file.\n\n\n\n\n\n\nInvisibly returns NULL.\n\n\n\n\nlibrary(lockbox)\n\n# Generate keys\nkey &lt;- key_generate()\n\n# Encrypt secrets\nsecrets &lt;- list(API_KEY = \"secret123\", DB_PASSWORD = \"pass456\")\nlockbox_encrypt(\"secrets.yaml\", secrets, key$public)\n\n# Add more secrets to existing lockbox\nmore_secrets &lt;- list(NEW_TOKEN = \"token789\")\nlockbox_encrypt(\"secrets.yaml\", more_secrets, key$public, key$private)",
    "crumbs": [
      "Reference",
      "lockbox_encrypt"
    ]
  },
  {
    "objectID": "man/lockbox_encrypt.html#encrypt-secrets-to-a-sops-lockbox",
    "href": "man/lockbox_encrypt.html#encrypt-secrets-to-a-sops-lockbox",
    "title": "lockbox",
    "section": "",
    "text": "Store secrets in an encrypted YAML file using SOPS and age encryption. If the lockbox file already exists, secrets will be merged with existing ones.\n\n\n\nlockbox_encrypt(lockbox, secrets, public, private = NULL)\n\n\n\n\n\n\n\nlockbox\n\n\nCharacter string. Path to the lockbox YAML file to create or update.\n\n\n\n\nsecrets\n\n\nNamed list. Secrets to encrypt, where names are variable names and values are the secret values.\n\n\n\n\npublic\n\n\nCharacter vector. One or more public keys for encryption (age recipient identifiers).\n\n\n\n\nprivate\n\n\nCharacter string or NULL. Private key required if lockbox already exists (for decryption and merging). Can be a private key string starting with \"AGE-SECRET-KEY-1\" or path to a key file.\n\n\n\n\n\n\nInvisibly returns NULL.\n\n\n\n\nlibrary(lockbox)\n\n# Generate keys\nkey &lt;- key_generate()\n\n# Encrypt secrets\nsecrets &lt;- list(API_KEY = \"secret123\", DB_PASSWORD = \"pass456\")\nlockbox_encrypt(\"secrets.yaml\", secrets, key$public)\n\n# Add more secrets to existing lockbox\nmore_secrets &lt;- list(NEW_TOKEN = \"token789\")\nlockbox_encrypt(\"secrets.yaml\", more_secrets, key$public, key$private)",
    "crumbs": [
      "Reference",
      "lockbox_encrypt"
    ]
  },
  {
    "objectID": "man/key_generate.html",
    "href": "man/key_generate.html",
    "title": "lockbox",
    "section": "",
    "text": "Create a new age encryption key pair. Keys can be saved to a file or kept in memory. The key pair consists of a public key (for encryption) and a private key (for decryption).\n\n\n\nkey_generate(keyfile = NULL)\n\n\n\n\n\n\n\nkeyfile\n\n\nCharacter string or NULL. If provided, saves the private key to this file path. If NULL, returns both public and private keys in memory without saving to disk.\n\n\n\n\n\n\nA lockbox_key object containing:\n\n\n$public: The public key (age recipient identifier)\n\n\n$private: The private key (only when keyfile = NULL)\n\n\n$created: Timestamp of key creation\n\n\n\n\n\n\nlibrary(lockbox)\n\n# Generate keys in memory\nkey &lt;- key_generate()\nprint(key$public)\nprint(key$private)\n\n# Generate and save to file\nkey_generate(\"my_identity.key\")",
    "crumbs": [
      "Reference",
      "key_generate"
    ]
  },
  {
    "objectID": "man/key_generate.html#generate-a-new-age-identity-key-pair",
    "href": "man/key_generate.html#generate-a-new-age-identity-key-pair",
    "title": "lockbox",
    "section": "",
    "text": "Create a new age encryption key pair. Keys can be saved to a file or kept in memory. The key pair consists of a public key (for encryption) and a private key (for decryption).\n\n\n\nkey_generate(keyfile = NULL)\n\n\n\n\n\n\n\nkeyfile\n\n\nCharacter string or NULL. If provided, saves the private key to this file path. If NULL, returns both public and private keys in memory without saving to disk.\n\n\n\n\n\n\nA lockbox_key object containing:\n\n\n$public: The public key (age recipient identifier)\n\n\n$private: The private key (only when keyfile = NULL)\n\n\n$created: Timestamp of key creation\n\n\n\n\n\n\nlibrary(lockbox)\n\n# Generate keys in memory\nkey &lt;- key_generate()\nprint(key$public)\nprint(key$private)\n\n# Generate and save to file\nkey_generate(\"my_identity.key\")",
    "crumbs": [
      "Reference",
      "key_generate"
    ]
  },
  {
    "objectID": "man/key_public.html",
    "href": "man/key_public.html",
    "title": "lockbox",
    "section": "",
    "text": "Read an age identity file and extract the public key (recipient identifier). The public key can be shared and used by others to encrypt data for you.\n\n\n\nkey_public(keyfile)\n\n\n\n\n\n\n\nkeyfile\n\n\nCharacter string. Path to the age identity file.\n\n\n\n\n\n\nCharacter string containing the public key (age recipient identifier).\n\n\n\n\nlibrary(lockbox)\n\n# Extract public key from file\npublic_key &lt;- key_public(\"my_identity.key\")\nprint(public_key)",
    "crumbs": [
      "Reference",
      "key_public"
    ]
  },
  {
    "objectID": "man/key_public.html#extract-public-key-from-an-age-identity-file",
    "href": "man/key_public.html#extract-public-key-from-an-age-identity-file",
    "title": "lockbox",
    "section": "",
    "text": "Read an age identity file and extract the public key (recipient identifier). The public key can be shared and used by others to encrypt data for you.\n\n\n\nkey_public(keyfile)\n\n\n\n\n\n\n\nkeyfile\n\n\nCharacter string. Path to the age identity file.\n\n\n\n\n\n\nCharacter string containing the public key (age recipient identifier).\n\n\n\n\nlibrary(lockbox)\n\n# Extract public key from file\npublic_key &lt;- key_public(\"my_identity.key\")\nprint(public_key)",
    "crumbs": [
      "Reference",
      "key_public"
    ]
  },
  {
    "objectID": "man/lockbox_export.html",
    "href": "man/lockbox_export.html",
    "title": "lockbox",
    "section": "",
    "text": "Decrypt all secrets from a lockbox file and export them as environment variables. This allows R packages and scripts to access secrets via Sys.getenv().\n\n\n\nlockbox_export(lockbox, private = NULL)\n\n\n\n\n\n\n\nlockbox\n\n\nCharacter string. Path to the lockbox YAML file.\n\n\n\n\nprivate\n\n\nCharacter string or NULL. Private key for decryption. Can be a private key string starting with \"AGE-SECRET-KEY-1\" or path to a key file. If NULL, uses default SOPS key resolution.\n\n\n\n\n\n\nInvisibly returns the secrets list.\n\n\n\n\nlibrary(lockbox)\n\n# Export all secrets as environment variables\nlockbox_export(\"secrets.yaml\", private = key$private)\n\n# Now you can access them\napi_key &lt;- Sys.getenv(\"API_KEY\")\ndb_password &lt;- Sys.getenv(\"DB_PASSWORD\")",
    "crumbs": [
      "Reference",
      "lockbox_export"
    ]
  },
  {
    "objectID": "man/lockbox_export.html#export-secrets-from-a-sops-lockbox-to-environment-variables",
    "href": "man/lockbox_export.html#export-secrets-from-a-sops-lockbox-to-environment-variables",
    "title": "lockbox",
    "section": "",
    "text": "Decrypt all secrets from a lockbox file and export them as environment variables. This allows R packages and scripts to access secrets via Sys.getenv().\n\n\n\nlockbox_export(lockbox, private = NULL)\n\n\n\n\n\n\n\nlockbox\n\n\nCharacter string. Path to the lockbox YAML file.\n\n\n\n\nprivate\n\n\nCharacter string or NULL. Private key for decryption. Can be a private key string starting with \"AGE-SECRET-KEY-1\" or path to a key file. If NULL, uses default SOPS key resolution.\n\n\n\n\n\n\nInvisibly returns the secrets list.\n\n\n\n\nlibrary(lockbox)\n\n# Export all secrets as environment variables\nlockbox_export(\"secrets.yaml\", private = key$private)\n\n# Now you can access them\napi_key &lt;- Sys.getenv(\"API_KEY\")\ndb_password &lt;- Sys.getenv(\"DB_PASSWORD\")",
    "crumbs": [
      "Reference",
      "lockbox_export"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "lockbox: Modern Encryption for R",
    "section": "",
    "text": "lockbox addresses two main use cases:\n\nFile Encryption: R users need an easy to encrypt and decrypt files using modern, secure encryption methods.\nSecret Management: Many R packages and services rely on environment variables for API keys and security tokens (LLM APIs, AWS S3, databases, etc.). Users need a secure way to store secrets in an encrypted file, and easily export them to the environment.\n\n\n\n\nThis package provides wrapper to two command line tools: age encryption and SOPS secrets manager.\n\n\nage is a simple, modern file encryption tool with small keys, no configuration options, and high security. It’s designed to replace tools like GPG for file encryption.\nModern encryption uses key pairs composed of:\n\nPublic key (shareable): for encryption\nPrivate key (secrete): for decryption\n\nThese keys can be used in this workflow:\n\nBob wants to send Alice a secret file.\nAlice shares her public key with Bob.\nBob uses Alice’s public key to encrypt the file.\nBob sends the encrypted file to Alice.\nAlice uses her private key to decrypt the file.\n\nAnyone with your public key can encrypt files for you, but only you can decrypt them with your private key.\n\n\n\nIn this package, SOPS is used for two purposes:\n\nStore secrets in an encrypted “lockbox” file in YAML format.\nRetrieve secrets from the lockbox and export them as environment variables.\n\n\n\n\n\n\n\nWarning\n\n\n\nYou must never edit your lockbox.yaml file manually. Always use the provided functions or sops to ensure the file remains valid and encrypted.\n\n\n\n\n\n\nTo use the lockbox package, you must first install the age and sops command line tools. Both tools are free and available on Windows, macOS, and Linux.\nYou can find installation instructions on their respective websites:\n\nhttps://age-encryption.org\nSOPS website\n\nThen, you can install lockbox from Github:\nremotes::install_github(\"vincentarelbundock/lockbox\")\n\n\n\n\n\nFirst, we create a private and a public key pair using the key_generate() function. The private key is saved to a file and should be kept secret. The public key can be shared and is used to encrypt data.\n\nlibrary(lockbox)\nkey &lt;- key_generate(\"identity.key\")\nkey\n\nKey created:  2025-08-05 16:31:22.205175 \nPublic key:  age1656qlv3nedfgcd76w0xepgah4j3qx58sp9u83aejnyzm2gwlwfds33ftdc \nPrivate key: AGE-SECRET-KEY-********* \n\n\nThis command also wrote a local “identity file” with the given name, which holds both the public and private keys.\n\nfile.exists(\"identity.key\")\n\n[1] TRUE\n\n\nSometimes, it is useful to manipulate the keys programmatically. We can access them from the key object created above, or read them from the identity file using helper functions.\n\nkey$public\n\n[1] \"age1656qlv3nedfgcd76w0xepgah4j3qx58sp9u83aejnyzm2gwlwfds33ftdc\"\n\nkey_private(\"identity.key\")\n\n[1] \"AGE-SECRET-KEY-19P3AL82DKJ5JZDZE94445372RGVU4ZWSV4G5C2FE95Q0G3DWFN0S52L5HX\"\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe identity.key file contains your private key. Do not share this file. It should be kept secret and secure.\n\n\n\n\n\nlockbox can encrypt and decrypt arbitrary files. To illustrate, let’s create a file with some text in it.\n\n# write file\ncat(\"Very sensitive data.\\n\", file = \"sensitive.txt\")\n\n# make sure we can read it\nreadLines(\"sensitive.txt\")\n\n[1] \"Very sensitive data.\"\n\n\nNow, let’s use the public key and the file_encrypt() function to encrypt the file. A .age suffix, and the content becomes unreadable.\n\nfile_encrypt(\n  input = \"sensitive.txt\",\n  public = key$public\n)\n\nreadLines(\"sensitive.txt.age\")\n\n[1] \"age-encryption.org/v1\"                                                                                                               \n[2] \"-&gt; X25519 saZpU96n2tYd5csdLmej0EqeSiIIaM50e/fA07eo+xA\"                                                                               \n[3] \"QxUfJTKjzxvijVCH7YgeJKu07EgvnTUUP54MpyRTdMs\"                                                                                         \n[4] \"--- OyDswiDhAvcjl/94CRg60AfqV89Rb8Sp7z3CC3na7bU\"                                                                                     \n[5] \"s\\vW ~]1sϖ\\004\\x9f!\\xa9|\\x8e\\xadALf\\xc5w}P\\x8ao-\\xea\\xb8\\xfd\\xc5\\xcd\\xf7@\\x96&\\x9e\\x84\\xfe\\xd5S\\xca\\033\\xf2\\\"\\xaa$\\xce\\xfa\\177\\x9f^+\"\n\n\nFinally, we can decrypt the file using the private key. The decrypted content is written to the output file or returned as a character vector if output is omitted.\n\nfile_decrypt(\n  input = \"sensitive.txt.age\",\n  output = \"sensitive_decrypted.txt\",\n  private = key$private\n)\n\nreadLines(\"sensitive_decrypted.txt\")\n\n[1] \"Very sensitive data.\"\n\n\n\n\n\nSeveral packages and application require users to export secrets as environment variables for easy access. We do not want to store these secrets in plain text files. Instead, we can store them in an encrypted YAML file, and use a helper function to decrypt the file and export environment variables.\nFor example, you need to store a security to access an API, the location of your private database, and some credentials to access AWS services. First, we define a named list with the values that we wish to store securely.\nThen, we call lockbox_encrypt() to encrypt those secrets into our lockbox file. Again, we use the public key for encryption.\n\nsecrets &lt;- list(\n  API_KEY = \"your-api-key-here\",\n  DATABASE_URL = \"postgresql://user:pass@host:5432/db\",\n  AWS_ACCESS_KEY_ID = \"AKIAIOSFODNN7EXAMPLE\"\n)\n\nlockbox_encrypt(\n  lockbox = \"lockbox.yaml\",\n  secrets = secrets,\n  public = key$public\n)\n\n\n\n\nNow, we can retreive a few secrets using our private key.\n\nlockbox_decrypt(\n  lockbox = \"lockbox.yaml\",\n  secrets = c(\"API_KEY\", \"DATABASE_URL\"),\n  private = key$private\n)\n\n$API_KEY\n[1] \"your-api-key-here\"\n\n$DATABASE_URL\n[1] \"postgresql://user:pass@host:5432/db\"\n\n\nOr all secrets at once by omitting the secrets argument:\n\nlockbox_decrypt(\n  lockbox = \"lockbox.yaml\",\n  private = key$private\n)\n\n$API_KEY\n[1] \"your-api-key-here\"\n\n$DATABASE_URL\n[1] \"postgresql://user:pass@host:5432/db\"\n\n$AWS_ACCESS_KEY_ID\n[1] \"AKIAIOSFODNN7EXAMPLE\"\n\n\n\n\n\nFinally, we can export all secrets from the lockbox file as environment variables. This is useful for applications that rely on environment variables for configuration.\n\nlockbox_export(\n  lockbox = \"lockbox.yaml\",\n  private = key$private\n)\n\nAnd we see that the secrets are indeed available in the environment.\n\nSys.getenv(\"API_KEY\")\n\n[1] \"your-api-key-here\"\n\nSys.getenv(\"DATABASE_URL\")\n\n[1] \"postgresql://user:pass@host:5432/db\"",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "lockbox: Modern Encryption for R",
    "section": "",
    "text": "lockbox addresses two main use cases:\n\nFile Encryption: R users need an easy to encrypt and decrypt files using modern, secure encryption methods.\nSecret Management: Many R packages and services rely on environment variables for API keys and security tokens (LLM APIs, AWS S3, databases, etc.). Users need a secure way to store secrets in an encrypted file, and easily export them to the environment.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#how",
    "href": "index.html#how",
    "title": "lockbox: Modern Encryption for R",
    "section": "",
    "text": "This package provides wrapper to two command line tools: age encryption and SOPS secrets manager.\n\n\nage is a simple, modern file encryption tool with small keys, no configuration options, and high security. It’s designed to replace tools like GPG for file encryption.\nModern encryption uses key pairs composed of:\n\nPublic key (shareable): for encryption\nPrivate key (secrete): for decryption\n\nThese keys can be used in this workflow:\n\nBob wants to send Alice a secret file.\nAlice shares her public key with Bob.\nBob uses Alice’s public key to encrypt the file.\nBob sends the encrypted file to Alice.\nAlice uses her private key to decrypt the file.\n\nAnyone with your public key can encrypt files for you, but only you can decrypt them with your private key.\n\n\n\nIn this package, SOPS is used for two purposes:\n\nStore secrets in an encrypted “lockbox” file in YAML format.\nRetrieve secrets from the lockbox and export them as environment variables.\n\n\n\n\n\n\n\nWarning\n\n\n\nYou must never edit your lockbox.yaml file manually. Always use the provided functions or sops to ensure the file remains valid and encrypted.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "lockbox: Modern Encryption for R",
    "section": "",
    "text": "To use the lockbox package, you must first install the age and sops command line tools. Both tools are free and available on Windows, macOS, and Linux.\nYou can find installation instructions on their respective websites:\n\nhttps://age-encryption.org\nSOPS website\n\nThen, you can install lockbox from Github:\nremotes::install_github(\"vincentarelbundock/lockbox\")",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#tutorial",
    "href": "index.html#tutorial",
    "title": "lockbox: Modern Encryption for R",
    "section": "",
    "text": "First, we create a private and a public key pair using the key_generate() function. The private key is saved to a file and should be kept secret. The public key can be shared and is used to encrypt data.\n\nlibrary(lockbox)\nkey &lt;- key_generate(\"identity.key\")\nkey\n\nKey created:  2025-08-05 16:31:22.205175 \nPublic key:  age1656qlv3nedfgcd76w0xepgah4j3qx58sp9u83aejnyzm2gwlwfds33ftdc \nPrivate key: AGE-SECRET-KEY-********* \n\n\nThis command also wrote a local “identity file” with the given name, which holds both the public and private keys.\n\nfile.exists(\"identity.key\")\n\n[1] TRUE\n\n\nSometimes, it is useful to manipulate the keys programmatically. We can access them from the key object created above, or read them from the identity file using helper functions.\n\nkey$public\n\n[1] \"age1656qlv3nedfgcd76w0xepgah4j3qx58sp9u83aejnyzm2gwlwfds33ftdc\"\n\nkey_private(\"identity.key\")\n\n[1] \"AGE-SECRET-KEY-19P3AL82DKJ5JZDZE94445372RGVU4ZWSV4G5C2FE95Q0G3DWFN0S52L5HX\"\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe identity.key file contains your private key. Do not share this file. It should be kept secret and secure.\n\n\n\n\n\nlockbox can encrypt and decrypt arbitrary files. To illustrate, let’s create a file with some text in it.\n\n# write file\ncat(\"Very sensitive data.\\n\", file = \"sensitive.txt\")\n\n# make sure we can read it\nreadLines(\"sensitive.txt\")\n\n[1] \"Very sensitive data.\"\n\n\nNow, let’s use the public key and the file_encrypt() function to encrypt the file. A .age suffix, and the content becomes unreadable.\n\nfile_encrypt(\n  input = \"sensitive.txt\",\n  public = key$public\n)\n\nreadLines(\"sensitive.txt.age\")\n\n[1] \"age-encryption.org/v1\"                                                                                                               \n[2] \"-&gt; X25519 saZpU96n2tYd5csdLmej0EqeSiIIaM50e/fA07eo+xA\"                                                                               \n[3] \"QxUfJTKjzxvijVCH7YgeJKu07EgvnTUUP54MpyRTdMs\"                                                                                         \n[4] \"--- OyDswiDhAvcjl/94CRg60AfqV89Rb8Sp7z3CC3na7bU\"                                                                                     \n[5] \"s\\vW ~]1sϖ\\004\\x9f!\\xa9|\\x8e\\xadALf\\xc5w}P\\x8ao-\\xea\\xb8\\xfd\\xc5\\xcd\\xf7@\\x96&\\x9e\\x84\\xfe\\xd5S\\xca\\033\\xf2\\\"\\xaa$\\xce\\xfa\\177\\x9f^+\"\n\n\nFinally, we can decrypt the file using the private key. The decrypted content is written to the output file or returned as a character vector if output is omitted.\n\nfile_decrypt(\n  input = \"sensitive.txt.age\",\n  output = \"sensitive_decrypted.txt\",\n  private = key$private\n)\n\nreadLines(\"sensitive_decrypted.txt\")\n\n[1] \"Very sensitive data.\"\n\n\n\n\n\nSeveral packages and application require users to export secrets as environment variables for easy access. We do not want to store these secrets in plain text files. Instead, we can store them in an encrypted YAML file, and use a helper function to decrypt the file and export environment variables.\nFor example, you need to store a security to access an API, the location of your private database, and some credentials to access AWS services. First, we define a named list with the values that we wish to store securely.\nThen, we call lockbox_encrypt() to encrypt those secrets into our lockbox file. Again, we use the public key for encryption.\n\nsecrets &lt;- list(\n  API_KEY = \"your-api-key-here\",\n  DATABASE_URL = \"postgresql://user:pass@host:5432/db\",\n  AWS_ACCESS_KEY_ID = \"AKIAIOSFODNN7EXAMPLE\"\n)\n\nlockbox_encrypt(\n  lockbox = \"lockbox.yaml\",\n  secrets = secrets,\n  public = key$public\n)\n\n\n\n\nNow, we can retreive a few secrets using our private key.\n\nlockbox_decrypt(\n  lockbox = \"lockbox.yaml\",\n  secrets = c(\"API_KEY\", \"DATABASE_URL\"),\n  private = key$private\n)\n\n$API_KEY\n[1] \"your-api-key-here\"\n\n$DATABASE_URL\n[1] \"postgresql://user:pass@host:5432/db\"\n\n\nOr all secrets at once by omitting the secrets argument:\n\nlockbox_decrypt(\n  lockbox = \"lockbox.yaml\",\n  private = key$private\n)\n\n$API_KEY\n[1] \"your-api-key-here\"\n\n$DATABASE_URL\n[1] \"postgresql://user:pass@host:5432/db\"\n\n$AWS_ACCESS_KEY_ID\n[1] \"AKIAIOSFODNN7EXAMPLE\"\n\n\n\n\n\nFinally, we can export all secrets from the lockbox file as environment variables. This is useful for applications that rely on environment variables for configuration.\n\nlockbox_export(\n  lockbox = \"lockbox.yaml\",\n  private = key$private\n)\n\nAnd we see that the secrets are indeed available in the environment.\n\nSys.getenv(\"API_KEY\")\n\n[1] \"your-api-key-here\"\n\nSys.getenv(\"DATABASE_URL\")\n\n[1] \"postgresql://user:pass@host:5432/db\"",
    "crumbs": [
      "Home"
    ]
  }
]